CREATE TABLE Utilisateur(
    id_utilisateur NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nom VARCHAR(50) NOT NULL,
    courriel VARCHAR(50) UNIQUE NOT NULL,
    num_tel VARCHAR(12) NOT NULL,
    date_de_naissance DATE NOT NULL,
    mot_de_passe VARCHAR(30) NOT NULL,

    CONSTRAINT utilisateur_pk PRIMARY KEY (id_utilisateur),

    CONSTRAINT check_mdp
        CHECK (LENGTH(mot_de_passe) >= 5)
);

CREATE TABLE Adresse(
    id_utilisateur NUMBER NOT NULL,
    numero_civique NUMBER NOT NULL,
    rue VARCHAR(50) NOT NULL,
    ville VARCHAR(50) NOT NULL,
    province VARCHAR(50) NOT NULL,
    code_postal CHAR(6) NOT NULL,

    CONSTRAINT address_utilisateur_pk PRIMARY KEY (id_utilisateur),

    CONSTRAINT address_utilisateur_fk
        FOREIGN KEY (id_utilisateur)
            REFERENCES Utilisateur(id_utilisateur)
);

CREATE TABLE Forfait(
    code_forfait CHAR(1) NOT NULL,
    cout FLOAT NOT NULL,
    location_max NUMBER NOT NULL,
    duree_max NUMBER NOT NULL,
    categorie_forfait VARCHAR(20) NOT NULL,

    CONSTRAINT check_categorie_forfait CHECK (categorie_forfait IN ('Débutant','Intermédiaire','Avancé')),

    CONSTRAINT code_forfait_pk PRIMARY KEY (code_forfait)
);

CREATE TABLE Client(
   id_utilisateur NUMBER NOT NULL,
   code_forfait CHAR(1) NOT NULL,

   CONSTRAINT client_utilisateur_pk PRIMARY KEY (id_utilisateur),

   CONSTRAINT client_utilisateur_fk
       FOREIGN KEY (id_utilisateur)
           REFERENCES Utilisateur(id_utilisateur),

   CONSTRAINT client_code_forfait_fk
       FOREIGN KEY (code_forfait)
           REFERENCES Forfait(code_forfait)
);

CREATE TABLE CarteDeCredit(
      id_utilisateur NUMBER NOT NULL,
      no_carte VARCHAR(16) NOT NULL,
      type_carte  VARCHAR(20) NOT NULL,
      exp_mois NUMBER NOT NULL,
      exp_annee NUMBER NOT NULL,
      cvv NUMBER NOT NULL,

      CONSTRAINT carteDeCredit_utilisateur_fk
          FOREIGN KEY (id_utilisateur)
              REFERENCES Client(id_utilisateur),

      CONSTRAINT carteDeCredit_utilisateur_pk PRIMARY KEY (id_utilisateur)
);

CREATE TABLE Employe(
        id_utilisateur NUMBER NOT NULL,
        matricule NUMBER,

        CONSTRAINT employe_utilisateur_pk PRIMARY KEY (id_utilisateur),

        CONSTRAINT employe_utilisateur_fk
            FOREIGN KEY (id_utilisateur)
                REFERENCES Utilisateur(id_utilisateur)

);

CREATE TABLE Personne(
    id_personne NUMBER NOT NULL,
    nom_personne VARCHAR(50) NOT NULL,
    date_naissance DATE,
    lieu_naissance VARCHAR(100),
    photo VARCHAR(200),
    bio LONG,
    categorie_personne VARCHAR(15),

    CONSTRAINT check_categorie_personne CHECK (categorie_personne IN  ('Realisateur', 'Acteur')),

    CONSTRAINT personne_pk PRIMARY KEY (id_personne)
);

CREATE TABLE Film(
     id_film NUMBER NOT NULL,
     id_realisateur NUMBER REFERENCES Personne(id_personne),
     titre VARCHAR(100) NOT NULL,
     annee NUMBER NOT NULL,
     langue VARCHAR(30),
     duree NUMBER NOT NULL,
     resume VARCHAR(4000),
     affiche VARCHAR(500),

     CONSTRAINT film_pk PRIMARY KEY (id_film)
);

CREATE TABLE Inventaire(
   id_film NUMBER NOT NULL,
   quantite NUMBER NOT NULL,

   CONSTRAINT inventaire_film_pk PRIMARY KEY (id_film),

   CONSTRAINT Inventaire_film_fk
       FOREIGN KEY (id_film)
           REFERENCES Film(id_film)
);

CREATE TABLE Location(
     id_location NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
     id_film NUMBER NOT NULL,
     id_utilisateur NUMBER NOT NULL,
     date_de_retour DATE,
     date_a_retourner DATE NOT NULL,
     date_emprunt DATE NOT NULL,


     CONSTRAINT Location_film_fk
         FOREIGN KEY (id_film)
             REFERENCES film(id_film),

     CONSTRAINT Location_utilisateur_fk
         FOREIGN KEY (id_utilisateur)
             REFERENCES Client(id_utilisateur),

     CONSTRAINT location_film_pk PRIMARY KEY (id_location)
);

CREATE TABLE Pays(
    id_pays NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nom VARCHAR(30) UNIQUE NOT NULL,

    CONSTRAINT pays_pk PRIMARY KEY (id_pays)
);

CREATE TABLE FilmPays(
     id_pays NUMBER NOT NULL,
     id_film NUMBER NOT NULL,

     CONSTRAINT filmpays_pk PRIMARY KEY (id_film, id_pays),

     CONSTRAINT filmpays_film_fk
         FOREIGN KEY (id_film)
             REFERENCES Film(id_film),

     CONSTRAINT filmpays_pays_fk
         FOREIGN KEY (id_pays)
             REFERENCES Pays(id_pays)
);

CREATE TABLE Genre(
    id_genre NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    genre VARCHAR(30) NOT NULL,

    CONSTRAINT genre_pk PRIMARY KEY (id_genre)
);

CREATE TABLE FilmGenre(
    id_genre NUMBER NOT NULL,
    id_film NUMBER NOT NULL,

    CONSTRAINT filmgenre_film_pk PRIMARY KEY (id_film, id_genre),

    CONSTRAINT filmgenre_film_fk
        FOREIGN KEY (id_film)
            REFERENCES Film(id_film),

    CONSTRAINT filmgenre_genre_fk
        FOREIGN KEY (id_genre)
            REFERENCES Genre(id_genre)
);

CREATE TABLE Scenariste(
    id_scenariste NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nom VARCHAR(100) NOT NULL,

    CONSTRAINT scenariste_pk PRIMARY KEY (id_scenariste)
);

CREATE TABLE FilmScenariste(
    id_scenariste NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    id_film NUMBER NOT NULL,

    CONSTRAINT filmscenariste_film_fk
        FOREIGN KEY (id_film)
            REFERENCES Film(id_film),

    CONSTRAINT filmscenariste_scenariste_fk
        FOREIGN KEY (id_scenariste)
            REFERENCES Scenariste(id_scenariste)

);

CREATE TABLE RoleActeur(
    id_film NUMBER NOT NULL,
    id_personne NUMBER NOT NULL,
    nom_personnage VARCHAR(100) NOT NULL,

    CONSTRAINT role_acteur_pk PRIMARY KEY (id_film, id_personne, nom_personnage),

    CONSTRAINT filmrole_fk
        FOREIGN KEY (id_film)
            REFERENCES Film(id_film),

    CONSTRAINT personnerole_fk
        FOREIGN KEY (id_personne)
            REFERENCES Personne(id_personne)
);

CREATE TABLE BandeAnnonce(
    id_bandeAnnonce NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    id_film NUMBER,
    lien VARCHAR(2048),

    CONSTRAINT bandeAnnonce_pk PRIMARY KEY (id_bandeAnnonce),

    CONSTRAINT BandeAnnonce_film_fk
        FOREIGN KEY (id_film)
            REFERENCES Film(id_film)
);